{
  "cve": {
    "data_type": "CVE",
    "data_format": "MITRE",
    "data_version": "4.0",
    "CVE_data_meta": {
      "ID": "CVE-2019-6250",
      "ASSIGNER": "cve@mitre.org"
    },
    "affects": {
      "vendor": {
        "vendor_data": [

        ]
      }
    },
    "problemtype": {
      "problemtype_data": [
        {
          "description": [

          ]
        }
      ]
    },
    "references": {
      "reference_data": [
        {
          "url": "https://github.com/zeromq/libzmq/issues/3351",
          "name": "https://github.com/zeromq/libzmq/issues/3351",
          "refsource": "CONFIRM",
          "tags": [

          ]
        },
        {
          "url": "https://github.com/zeromq/libzmq/releases/tag/v4.3.1",
          "name": "https://github.com/zeromq/libzmq/releases/tag/v4.3.1",
          "refsource": "CONFIRM",
          "tags": [

          ]
        },
        {
          "url": "https://www.debian.org/security/2019/dsa-4368",
          "name": "DSA-4368",
          "refsource": "DEBIAN",
          "tags": [

          ]
        }
      ]
    },
    "description": {
      "description_data": [
        {
          "lang": "en",
          "value": "A pointer overflow, with code execution, was discovered in ZeroMQ libzmq (aka 0MQ) 4.2.x and 4.3.x before 4.3.1. A v2_decoder.cpp zmq::v2_decoder_t::size_ready integer overflow allows an authenticated attacker to overwrite an arbitrary amount of bytes beyond the bounds of a buffer, which can be leveraged to run arbitrary code on the target system. The memory layout allows the attacker to inject OS commands into a data structure located immediately after the problematic buffer (i.e., it is not necessary to use a typical buffer-overflow exploitation technique that changes the flow of control)."
        }
      ]
    }
  },
  "configurations": {
    "CVE_data_version": "4.0",
    "nodes": [

    ]
  },
  "impact": {
  },
  "publishedDate": "2019-01-13T15:29Z",
  "lastModifiedDate": "2019-01-15T11:29Z"
}